diff --git a/commandline.c b/commandline.c
index 21021ca..d41a746 100644
--- a/commandline.c
+++ b/commandline.c
@@ -160,6 +160,18 @@ JNIEXPORT jint JNICALL Java_org_servalproject_servald_ServalD_rawCommand(JNIEnv
 
   // Construct argv, argc from this method's arguments.
   jsize len = (*env)->GetArrayLength(env, args);
+
+  /*
+   * take the first element as the serval instance path!
+   */
+  if (len < 1) 
+    return Throw(env, "java/langIllegalStateException", "Not enough parameters!");
+  jstring instance_path = (jstring)(*env)->GetObjectArrayElement(env,args,0);
+  const char *instance_path_char = (*env)->GetStringUTFChars(env,instance_path,NULL);
+  const char *old_instance_path = serval_instancepath();
+  serval_setinstancepath(instance_path_char);
+
+  len = len - 1;
   const char **argv = alloca(sizeof(char*) * (len + 1));
   if (argv == NULL)
     return Throw(env, "java/lang/OutOfMemoryError", "alloca() returned NULL");
@@ -170,7 +182,7 @@ JNIEXPORT jint JNICALL Java_org_servalproject_servald_ServalD_rawCommand(JNIEnv
   // From now on, in case of an exception we have to free some resources before
   // returning.
   for (i = 0; !context.jni_exception && i < len; ++i) {
-    const jstring arg = (jstring)(*env)->GetObjectArrayElement(env, args, i);
+    const jstring arg = (jstring)(*env)->GetObjectArrayElement(env, args, i+1);
     if ((*env)->ExceptionOccurred(env))
       context.jni_exception = 1;
     else if (arg == NULL) {
@@ -194,6 +206,8 @@ JNIEXPORT jint JNICALL Java_org_servalproject_servald_ServalD_rawCommand(JNIEnv
     status = parseCommandLine(&context, NULL, argc, argv);
   }
 
+  serval_setinstancepath(old_instance_path);
+
   // free any temporary output buffer
   if (context.outv_buffer)
     free(context.outv_buffer);
@@ -201,7 +215,7 @@ JNIEXPORT jint JNICALL Java_org_servalproject_servald_ServalD_rawCommand(JNIEnv
   // Release argv Java string buffers.
   for (i = 0; i < len; ++i) {
     if (argv[i]) {
-      const jstring arg = (jstring)(*env)->GetObjectArrayElement(env, args, i);
+      const jstring arg = (jstring)(*env)->GetObjectArrayElement(env, args, i+1);
       (*env)->ReleaseStringUTFChars(env, arg, argv[i]);
     }
   }
